import datetime

class Project:
    def __init__(self, name, start_date, priority, estimate, completion):
        self.name = name
        self.start_date = datetime.datetime.strptime(start_date, "%d/%m/%Y").date()
        self.priority = int(priority)
        self.estimate = float(estimate)
        self.completion = int(completion)

    def __str__(self):
        completion_str = f"{self.completion}%" if self.completion < 100 else "Completed"
        return f"{self.name}, start: {self.start_date.strftime('%d/%m/%Y')}, priority {self.priority}, estimate: ${self.estimate:.2f}, completion: {completion_str}"

    def is_complete(self):
        return self.completion == 100

    def __lt__(self, other):
        return self.priority < other.priority


def load_projects(filename="projects.txt"):
    projects = []
    with open(filename, "r") as file:
        next(file)  # Skip the header line
        for line in file:
            parts = line.strip().split("\t")
            if len(parts) == 5:
                project = Project(*parts)
                projects.append(project)
    return projects


def save_projects(projects, filename="projects.txt"):
    with open(filename, "w") as file:
        # Write the header
        file.write("Name\tStart Date\tPriority\tEstimate\tCompletion\n")
        for project in projects:
            file.write("\t".join([project.name, project.start_date.strftime('%d/%m/%Y'),
                                  str(project.priority), f"{project.estimate:.2f}",
                                  str(project.completion)]) + "\n")


def display_projects(projects):
    incomplete_projects = [p for p in projects if not p.is_complete()]
    completed_projects = [p for p in projects if p.is_complete()]
    print("Incomplete projects:")
    for project in sorted(incomplete_projects, key=lambda p: p.priority):
        print(f"  {project}")
    print("Completed projects:")
    for project in sorted(completed_projects, key=lambda p: p.priority):
        print(f"  {project}")


def filter_projects_by_date(projects):
    # Your implementation goes here
    pass


def add_new_project(projects):
    # Your implementation goes here
    pass


def update_project(projects):
    # Your implementation goes here
    pass


def main():
    projects = load_projects()

    while True:
        print("- (L)oad projects")
        print("- (S)ave projects")
        print("- (D)isplay projects")
        print("- (F)ilter projects by date")
        print("- (A)dd new project")
        print("- (U)pdate project")
        print("- (Q)uit")
        choice = input(">>> ").lower()
        if choice == 'l':
            filename = input("Enter filename to load: ")
            projects = load_projects(filename)
        elif choice == 's':
            filename = input("Enter filename to save: ")
            save_projects(projects, filename)
        elif choice == 'd':
            display_projects(projects)
        elif choice == 'f':
            filter_projects_by_date(projects)
        elif choice == 'a':
            add_new_project(projects)
        elif choice == 'u':
            update_project(projects)
        elif choice == 'q':
            if input("Would you like to save to projects.txt? ").lower().startswith('y'):
                save_projects(projects)
            print("Thank you for using custom-built project management software.")
            break


if __name__ == "__main__":
    main()
